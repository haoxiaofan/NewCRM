<#@ template language="C#" debug="true" hostspecific="true" #>
<#@ output extension="cs" #>
<#@ Assembly Name="System.Core" #>
<#@ Assembly Name="$(SolutionDir)\NewCRM.Infrastructure\bin\Debug\NewCRM.Infrastructure.dll" #>
<#@ Assembly Name="$(SolutionDir)\NewCRM.Domain\bin\Debug\NewCRM.Domain.dll" #>
<#@ Import Namespace="System.IO" #>
<#@ Import Namespace="System.Linq" #>
<#@ Import Namespace="System.Text" #>
<#@ import Namespace="System.Reflection" #>
<#@ Import Namespace="System.Collections.Generic" #>
<#@ Import Namespace="NewCRM.Infrastructure.CommonTools" #>
<#@ Import Namespace="NewCRM.Infrastructure.CommonTools.T4" #>
<#@ Import Namespace="NewCRM.Domain.DomainModel" #>
<#@ Import Namespace="NewCRM.Domain.DomainModel.Account" #>
<#@ Import Namespace="NewCRM.Domain.DomainModel.Security" #>
<#@ Import Namespace="NewCRM.Domain.DomainModel.System" #>
<#@ include file="T4Toolbox.tt" #>
<#@ include file="Template\EntityConfigurationTemplate.tt" #>
<#@ include file="Template\IEntityRepositoryTemplate.tt" #>
<#
    string currentPath = Path.GetDirectoryName(Host.TemplateFile);
    string projectPath =currentPath.Substring(0, currentPath.IndexOf(@"\T4Template"));
    string solutionPath = currentPath.Substring(0, currentPath.IndexOf(@"\NewCRM.Infrastructure"));
   
    string modelFile= Path.Combine(solutionPath, @"NewCRM.Domain\bin\Debug\NewCRM.Domain.dll");
    byte[] fileData= File.ReadAllBytes(modelFile);
    Assembly assembly = Assembly.LoadFile(modelFile);
	
	
    IEnumerable<Type> modelTypes = assembly.GetTypes().Where(c =>(typeof(EntityBase<Int32>).IsAssignableFrom(c)&&typeof(IAggregationRoot).IsAssignableFrom(c))&& !c.IsAbstract);
    modelTypes.ToList().ForEach(modelType=>{
        T4ModelInfo model = new T4ModelInfo(modelType,true);
        //实体映射类
        EntityConfigurationTemplate config = new EntityConfigurationTemplate(model);
        var path = model.UseModuleDir 
            ? string.Format(@"{0}\Configuration\{1}", projectPath, model.ModuleName)
            : string.Format(@"{0}\Configuration", projectPath);
        config.Output.Encoding = Encoding.UTF8;
        config.RenderToFile(Path.Combine(path, config.FileName));

        //实体仓储操作接口
        IEntityRepositoryTemplate irep= new IEntityRepositoryTemplate(model);
        path = model.UseModuleDir
            ? string.Format(@"{0}\Repositories\{1}", projectPath, model.ModuleName)
            : string.Format(@"{0}\Repositories", projectPath);
        irep.Output.Encoding = Encoding.UTF8;
        irep.RenderToFile(Path.Combine(path, irep.FileName));
        });
#>